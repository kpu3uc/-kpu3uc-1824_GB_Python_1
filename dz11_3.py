# 3. Создайте собственный класс-исключение, который должен проверять содержимое списка на наличие только чисел.
# Проверить работу исключения на реальном примере. Запрашивать у пользователя данные и заполнять список
# необходимо только числами. Класс-исключение должен контролировать типы данных элементов списка.
# Примечание: длина списка не фиксирована. Элементы запрашиваются бесконечно, пока пользователь сам не
# остановит работу скрипта, введя, например, команду «stop».
# При этом скрипт завершается, сформированный список с числами выводится на экран.
# Подсказка: для этого задания примем, что пользователь может вводить только числа и строки.
# Во время ввода пользователем очередного элемента необходимо реализовать проверку типа элемента.
# Вносить его в список, только если введено число. Класс-исключение должен не позволить пользователю
# ввести текст (не число) и отобразить соответствующее сообщение. При этом работа скрипта не должна завершаться.


class NotIntError(Exception):
    _default_detail: str = 'не число'

    def __init__(self, detail: str = None):
        if detail:
            self._default_detail = detail
            print(f"ошибочка вышла: {self._default_detail}, попробуйте ещё раз")


int_list = []

while True:
    test_int = input("Введите число: ")
    if test_int == "stop":
        print(int_list)
        break
    try:
        _ = int(test_int)
    except ValueError as err:
        NotIntError(str(err))
    else:
        int_list.append(int(test_int))
        print(int_list)
